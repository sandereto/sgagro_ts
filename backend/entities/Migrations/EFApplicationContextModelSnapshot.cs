// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using entities;

namespace entities.Migrations
{
    [DbContext(typeof(EFApplicationContext))]
    partial class EFApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("entities.logs.StoredEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AggregateId")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("Data")
                        .HasColumnName("data");

                    b.Property<string>("MessageType")
                        .HasColumnName("message_type");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario");

                    b.HasKey("Id")
                        .HasName("pk_stored_event");

                    b.ToTable("stored_event","logs");
                });

            modelBuilder.Entity("entities.rehagro.Apontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("ApontamentoTipoId")
                        .HasColumnName("apontamento_tipo_id");

                    b.HasKey("Id")
                        .HasName("pk_apontamento");

                    b.HasIndex("ApontamentoTipoId")
                        .HasName("ix_apontamento_apontamento_tipo_id");

                    b.ToTable("apontamento","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.ApontamentoTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_apontamento_tipo");

                    b.ToTable("apontamento_tipo","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Agrupador")
                        .HasColumnName("agrupador");

                    b.Property<decimal>("AreaHa")
                        .HasColumnName("area_ha");

                    b.Property<bool>("Ativo")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<Guid>("MaturidadeSoloId")
                        .HasColumnName("maturidade_solo_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.Property<string>("Observacao")
                        .HasColumnName("observacao")
                        .HasMaxLength(500);

                    b.HasKey("Id")
                        .HasName("pk_area");

                    b.HasIndex("FazendaId")
                        .HasName("ix_area_fazenda_id");

                    b.HasIndex("MaturidadeSoloId")
                        .HasName("ix_area_maturidade_solo_id");

                    b.ToTable("area","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Cultura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_cultura");

                    b.HasIndex("FazendaId")
                        .HasName("ix_cultura_fazenda_id");

                    b.ToTable("cultura","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Equipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_equipe");

                    b.HasIndex("FazendaId")
                        .HasName("ix_equipe_fazenda_id");

                    b.ToTable("equipe","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Fazenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CAR")
                        .HasColumnName("car")
                        .HasMaxLength(10);

                    b.Property<string>("CpfCnpj")
                        .HasColumnName("cpf_cnpj")
                        .HasMaxLength(40);

                    b.Property<Guid>("FazendaTipoId")
                        .HasColumnName("fazenda_tipo_id");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnName("inscricao_estadual")
                        .HasMaxLength(10);

                    b.Property<string>("InscricaoMunicipal")
                        .HasColumnName("inscricao_municipal")
                        .HasMaxLength(10);

                    b.Property<string>("NomeRazao")
                        .IsRequired()
                        .HasColumnName("nome_razao")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_fazenda");

                    b.HasIndex("FazendaTipoId")
                        .HasName("ix_fazenda_fazenda_tipo_id");

                    b.ToTable("fazenda","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.FazendaTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_fazenda_tipo");

                    b.ToTable("fazenda_tipo","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.MaturidadeSolo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_maturidade_solo");

                    b.HasIndex("FazendaId")
                        .HasName("ix_maturidade_solo_fazenda_id");

                    b.ToTable("maturidade_solo","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnName("ativo");

                    b.Property<string>("CpfCnpj")
                        .HasColumnName("cpf_cnpj")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(200);

                    b.Property<string>("Nacionalidade")
                        .HasColumnName("nacionalidade")
                        .HasMaxLength(40);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.Property<Guid>("PessoaTipoId")
                        .HasColumnName("pessoa_tipo_id");

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasMaxLength(11);

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnName("sexo")
                        .HasMaxLength(40);

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasMaxLength(12);

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_pessoa");

                    b.HasIndex("PessoaTipoId")
                        .HasName("ix_pessoa_pessoa_tipo_id");

                    b.HasIndex("UsuarioId")
                        .HasName("ix_pessoa_usuario_id");

                    b.ToTable("pessoa","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.PessoaTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_pessoa_tipo");

                    b.HasIndex("FazendaId")
                        .HasName("ix_pessoa_tipo_fazenda_id");

                    b.ToTable("pessoa_tipo","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Safra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Ano")
                        .HasColumnName("ano");

                    b.Property<bool>("Ativa")
                        .HasColumnName("ativa");

                    b.Property<Guid>("CulturaId")
                        .HasColumnName("cultura_id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<DateTime>("Fim")
                        .HasColumnName("fim");

                    b.Property<DateTime>("Inicio")
                        .HasColumnName("inicio");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.Property<Guid>("UnidadeId")
                        .HasColumnName("unidade_id");

                    b.HasKey("Id")
                        .HasName("pk_safra");

                    b.HasIndex("CulturaId")
                        .HasName("ix_safra_cultura_id");

                    b.HasIndex("FazendaId")
                        .HasName("ix_safra_fazenda_id");

                    b.HasIndex("UnidadeId")
                        .HasName("ix_safra_unidade_id");

                    b.ToTable("safra","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.Property<Guid>("ServicoTipoId")
                        .HasColumnName("servico_tipo_id");

                    b.HasKey("Id")
                        .HasName("pk_servico");

                    b.HasIndex("FazendaId")
                        .HasName("ix_servico_fazenda_id");

                    b.HasIndex("ServicoTipoId")
                        .HasName("ix_servico_servico_tipo_id");

                    b.ToTable("servico","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.ServicoTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_servico_tipo");

                    b.HasIndex("FazendaId")
                        .HasName("ix_servico_tipo_fazenda_id");

                    b.ToTable("servico_tipo","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Turno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_turno");

                    b.HasIndex("FazendaId")
                        .HasName("ix_turno_fazenda_id");

                    b.ToTable("turno","rehagro");
                });

            modelBuilder.Entity("entities.rehagro.Unidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_unidade");

                    b.HasIndex("FazendaId")
                        .HasName("ix_unidade_fazenda_id");

                    b.ToTable("unidade","rehagro");
                });

            modelBuilder.Entity("seguranca.Modulo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo");

                    b.Property<bool>("Desativado")
                        .HasColumnName("desativado");

                    b.Property<string>("Nome")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_modulo");

                    b.ToTable("modulo","seguranca");
                });

            modelBuilder.Entity("seguranca.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<bool>("Desativado")
                        .HasColumnName("desativado");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("aspnetroles","seguranca");
                });

            modelBuilder.Entity("seguranca.PerfilClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId")
                        .HasName("ix_aspnetroleclaims_role_id");

                    b.ToTable("aspnetroleclaims","seguranca");
                });

            modelBuilder.Entity("seguranca.PerfilModulo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Desativado")
                        .HasColumnName("desativado");

                    b.Property<Guid>("ModuloId")
                        .HasColumnName("modulo_id");

                    b.Property<Guid>("PerfilId")
                        .HasColumnName("perfil_id");

                    b.HasKey("Id")
                        .HasName("pk_perfil_modulo");

                    b.HasIndex("ModuloId")
                        .HasName("ix_perfil_modulo_modulo_id");

                    b.HasIndex("PerfilId")
                        .HasName("ix_perfil_modulo_perfil_id");

                    b.ToTable("perfil_modulo","seguranca");
                });

            modelBuilder.Entity("seguranca.PerfilModuloPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Desativado")
                        .HasColumnName("desativado");

                    b.Property<Guid>("PerfilModuloId")
                        .HasColumnName("perfil_modulo_id");

                    b.Property<Guid>("PermissaoId")
                        .HasColumnName("permissao_id");

                    b.HasKey("Id")
                        .HasName("pk_modulo_permissao");

                    b.HasIndex("PerfilModuloId")
                        .HasName("ix_modulo_permissao_perfil_modulo_id");

                    b.HasIndex("PermissaoId")
                        .HasName("ix_modulo_permissao_permissao_id");

                    b.ToTable("modulo_permissao","seguranca");
                });

            modelBuilder.Entity("seguranca.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo");

                    b.Property<bool>("Desativado")
                        .HasColumnName("desativado");

                    b.Property<string>("Nome")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_permissao");

                    b.ToTable("permissao","seguranca");
                });

            modelBuilder.Entity("seguranca.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("CpjCnpj")
                        .HasColumnName("cpj_cnpj")
                        .HasMaxLength(14);

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<bool>("Desativado")
                        .HasColumnName("desativado");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(40);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("aspnetusers","seguranca");
                });

            modelBuilder.Entity("seguranca.UsuarioClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId")
                        .HasName("ix_aspnetuserclaims_user_id");

                    b.ToTable("aspnetuserclaims","seguranca");
                });

            modelBuilder.Entity("seguranca.UsuarioLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasName("ix_aspnetuserlogins_user_id");

                    b.ToTable("aspnetuserlogins","seguranca");
                });

            modelBuilder.Entity("seguranca.UsuarioPerfil", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<Guid>("FazendaId")
                        .HasColumnName("fazenda_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("FazendaId")
                        .HasName("ix_aspnetuserroles_fazenda_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_aspnetuserroles_role_id");

                    b.ToTable("aspnetuserroles","seguranca");
                });

            modelBuilder.Entity("seguranca.UsuarioToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("aspnetusertokens","seguranca");
                });

            modelBuilder.Entity("entities.rehagro.Apontamento", b =>
                {
                    b.HasOne("entities.rehagro.ApontamentoTipo", "ApontamentoTipo")
                        .WithMany()
                        .HasForeignKey("ApontamentoTipoId")
                        .HasConstraintName("fk_apontamento_apontamento_tipo_apontamento_tipo_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Area", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_area_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("entities.rehagro.MaturidadeSolo", "MaturidadeSolo")
                        .WithMany()
                        .HasForeignKey("MaturidadeSoloId")
                        .HasConstraintName("fk_area_maturidade_solo_maturidade_solo_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Cultura", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_cultura_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Equipe", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_equipe_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Fazenda", b =>
                {
                    b.HasOne("entities.rehagro.FazendaTipo", "FazendaTipo")
                        .WithMany()
                        .HasForeignKey("FazendaTipoId")
                        .HasConstraintName("fk_fazenda_fazenda_tipo_fazenda_tipo_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.MaturidadeSolo", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_maturidade_solo_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Pessoa", b =>
                {
                    b.HasOne("entities.rehagro.PessoaTipo", "PessoaTipo")
                        .WithMany()
                        .HasForeignKey("PessoaTipoId")
                        .HasConstraintName("fk_pessoa_pessoa_tipo_pessoa_tipo_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("seguranca.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_pessoa_asp_net_users_usuario_id");
                });

            modelBuilder.Entity("entities.rehagro.PessoaTipo", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_pessoa_tipo_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Safra", b =>
                {
                    b.HasOne("entities.rehagro.Cultura", "Cultura")
                        .WithMany()
                        .HasForeignKey("CulturaId")
                        .HasConstraintName("fk_safra_cultura_cultura_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_safra_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("entities.rehagro.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId")
                        .HasConstraintName("fk_safra_unidade_unidade_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Servico", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_servico_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("entities.rehagro.ServicoTipo", "ServicoTipo")
                        .WithMany()
                        .HasForeignKey("ServicoTipoId")
                        .HasConstraintName("fk_servico_servico_tipo_servico_tipo_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.ServicoTipo", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_servico_tipo_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Turno", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_turno_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("entities.rehagro.Unidade", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_unidade_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("seguranca.PerfilClaim", b =>
                {
                    b.HasOne("seguranca.Perfil")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("seguranca.PerfilModulo", b =>
                {
                    b.HasOne("seguranca.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("ModuloId")
                        .HasConstraintName("fk_perfil_modulo_modulo_modulo_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("seguranca.Perfil", "Perfil")
                        .WithMany("Modulos")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("fk_perfil_modulo_aspnetroles_perfil_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("seguranca.PerfilModuloPermissao", b =>
                {
                    b.HasOne("seguranca.PerfilModulo", "PerfilModulo")
                        .WithMany("Permissoes")
                        .HasForeignKey("PerfilModuloId")
                        .HasConstraintName("fk_modulo_permissao_perfil_modulo_perfil_modulo_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("seguranca.Permissao", "Permissao")
                        .WithMany()
                        .HasForeignKey("PermissaoId")
                        .HasConstraintName("fk_modulo_permissao_permissao_permissao_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("seguranca.UsuarioClaim", b =>
                {
                    b.HasOne("seguranca.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("seguranca.UsuarioLogin", b =>
                {
                    b.HasOne("seguranca.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("seguranca.UsuarioPerfil", b =>
                {
                    b.HasOne("entities.rehagro.Fazenda", "Fazenda")
                        .WithMany()
                        .HasForeignKey("FazendaId")
                        .HasConstraintName("fk_aspnetuserroles_fazenda_fazenda_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("seguranca.Perfil", "Role")
                        .WithMany("Papeis")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("seguranca.Usuario", "User")
                        .WithMany("Papeis")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("seguranca.UsuarioToken", b =>
                {
                    b.HasOne("seguranca.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
